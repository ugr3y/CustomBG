#!/usr/bin/env bash

# Script to set a custom GDM login background on Ubuntu 22.04
# The background image 'loginbg.png' must be in the same directory as this script.

# Exit on error, treat unset variables as an error, and ensure pipe failures are caught.
set -euo pipefail

# --- Configuration ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)" # Gets the script's directory
LOGIN_BG_SOURCE_NAME="loginbg.png"
LOGIN_BG_SOURCE_PATH="${SCRIPT_DIR}/${LOGIN_BG_SOURCE_NAME}"

BG_ASSETS_DIR="/usr/local/share/bg-assets"
LOGIN_BG_DEST_NAME="loginbg.png" # You can change this if you want the destination file to have a different name
LOGIN_BG_DEST_PATH="${BG_ASSETS_DIR}/${LOGIN_BG_DEST_NAME}"

CUSTOM_GDM_SKIN_DIR="/usr/local/share/custom-gdm-skin"
CUSTOM_CSS_NAME="custom-gdm.css"
CUSTOM_CSS_PATH="${CUSTOM_GDM_SKIN_DIR}/${CUSTOM_CSS_NAME}"

GRESOURCE_XML_NAME="gnome-shell-theme.gresource.xml"
GRESOURCE_XML_PATH="${CUSTOM_GDM_SKIN_DIR}/${GRESOURCE_XML_NAME}"

# This was the filename you confirmed you were using for the compiled resource
COMPILED_GRESOURCE_NAME="custom-gdm-theme.gresource"
COMPILED_GRESOURCE_PATH="${CUSTOM_GDM_SKIN_DIR}/${COMPILED_GRESOURCE_NAME}"

# System paths for GDM theme that will be managed by update-alternatives
LINK_PATH_TO_MANAGE="/usr/share/gnome-shell/gnome-shell-theme.gresource"
LINK_GROUP_NAME="gnome-shell-theme.gresource" # Logical name for this alternatives group
ORIGINAL_THEME_FILE_RENAMED_PATH="/usr/share/gnome-shell/gnome-shell-theme.gresource.original-yaru" # Where we move the original
YARU_CSS_PATH="file:///usr/share/gnome-shell/theme/Yaru/gnome-shell.css" # Standard Yaru CSS path

# --- Helper Functions ---
info() {
    echo "[INFO] $1"
}

error_exit() {
    echo "[ERROR] $1" >&2
    exit 1
}

# --- Main Script Functions ---

check_root_privileges() {
    if [ "$(id -u)" -ne 0 ]; then
        error_exit "This script must be run as root (e.g., using 'sudo ./scriptname.sh'). Aborting."
    fi
    info "Root privileges confirmed."
}

install_dependencies() {
    info "Checking for 'glib-compile-resources' command..."
    if ! command -v glib-compile-resources &> /dev/null; then
        info "'glib-compile-resources' not found. Attempting to install 'libglib2.0-dev'..."
        if apt update && apt install -y libglib2.0-dev; then
            info "'libglib2.0-dev' installed successfully."
        else
            error_exit "Failed to install 'libglib2.0-dev'. Please install it manually and re-run."
        fi
    else
        info "'glib-compile-resources' is already installed."
    fi
}

prepare_background_image() {
    info "Preparing background image..."
    if [ ! -f "${LOGIN_BG_SOURCE_PATH}" ]; then
        error_exit "Background image '${LOGIN_BG_SOURCE_NAME}' not found in script directory: '${SCRIPT_DIR}'."
    fi

    mkdir -p "${BG_ASSETS_DIR}" || error_exit "Failed to create directory: ${BG_ASSETS_DIR}"
    cp "${LOGIN_BG_SOURCE_PATH}" "${LOGIN_BG_DEST_PATH}" || error_exit "Failed to copy background image."
    chmod 644 "${LOGIN_BG_DEST_PATH}" || error_exit "Failed to set permissions on background image."
    # Ensure parent directories are accessible
    chmod 755 "${BG_ASSETS_DIR}"
    chmod 755 "$(dirname "${BG_ASSETS_DIR}")" # e.g. /usr/local/share

    info "Background image successfully copied to ${LOGIN_BG_DEST_PATH}"
}

create_custom_css_file() {
    info "Creating custom CSS file at ${CUSTOM_CSS_PATH}..."
    mkdir -p "${CUSTOM_GDM_SKIN_DIR}" || error_exit "Failed to create directory: ${CUSTOM_GDM_SKIN_DIR}"

    cat > "${CUSTOM_CSS_PATH}" << EOF
/* Custom GDM CSS generated by script */
@import url("${YARU_CSS_PATH}");

#lockDialogGroup {
    background: url('file://${LOGIN_BG_DEST_PATH}') !important;
    background-size: cover !important;
    background-repeat: no-repeat !important;
    background-position: center center !important;
}
EOF
    chmod 644 "${CUSTOM_CSS_PATH}"
    info "Custom CSS file created."
}

create_gresource_xml_file() {
    info "Creating gresource XML definition at ${GRESOURCE_XML_PATH}..."
    cat > "${GRESOURCE_XML_PATH}" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<gresources>
  <gresource prefix="/org/gnome/shell/theme">
    <file alias="gnome-shell.css">${CUSTOM_CSS_NAME}</file>
  </gresource>
</gresources>
EOF
    chmod 644 "${GRESOURCE_XML_PATH}"
    info "Gresource XML file created."
}

compile_custom_gresource() {
    info "Compiling custom gresource file to ${COMPILED_GRESOURCE_PATH}..."
    # Run glib-compile-resources from within the skin directory because XML references CSS file relatively
    if (cd "${CUSTOM_GDM_SKIN_DIR}" && glib-compile-resources --target="${COMPILED_GRESOURCE_NAME}" "${GRESOURCE_XML_NAME}"); then
        info "Custom gresource file compiled successfully."
    else
        error_exit "Failed to compile gresource file in ${CUSTOM_GDM_SKIN_DIR}."
    fi
    
    if [ ! -f "${COMPILED_GRESOURCE_PATH}" ]; then
        error_exit "Compiled gresource file not found at ${COMPILED_GRESOURCE_PATH} after compilation."
    fi
    chmod 644 "${COMPILED_GRESOURCE_PATH}"
}

configure_update_alternatives() {
    info "Configuring GDM theme using update-alternatives..."

    # Handle the original theme file:
    # If LINK_PATH_TO_MANAGE is a regular file (not a symlink), it's the first time this script is "taking over".
    if [ -f "${LINK_PATH_TO_MANAGE}" ] && [ ! -L "${LINK_PATH_TO_MANAGE}" ]; then
        info "Original GDM theme resource at '${LINK_PATH_TO_MANAGE}' is a direct file."
        info "Backing it up and moving it to '${ORIGINAL_THEME_FILE_RENAMED_PATH}'."
        
        TIMESTAMP_BACKUP="${LINK_PATH_TO_MANAGE}.backup-$(date +%F-%H%M%S)"
        cp "${LINK_PATH_TO_MANAGE}" "${TIMESTAMP_BACKUP}" || error_exit "Failed to create backup of original theme file."
        info "Original theme file backed up to ${TIMESTAMP_BACKUP}"
        
        mv "${LINK_PATH_TO_MANAGE}" "${ORIGINAL_THEME_FILE_RENAMED_PATH}" || error_exit "Failed to move original theme file."
        info "Original theme file moved."

        info "Installing the moved original theme as an alternative (Priority 10)..."
        update-alternatives --install "${LINK_PATH_TO_MANAGE}" "${LINK_GROUP_NAME}" "${ORIGINAL_THEME_FILE_RENAMED_PATH}" 10 \
            || error_exit "Failed to install original theme into update-alternatives."
    elif [ -f "${ORIGINAL_THEME_FILE_RENAMED_PATH}" ]; then
        info "Found previously moved original theme at '${ORIGINAL_THEME_FILE_RENAMED_PATH}'."
        # Ensure it's registered in alternatives if not already
        if ! update-alternatives --display "${LINK_GROUP_NAME}" | grep -qF --fixed-strings "${ORIGINAL_THEME_FILE_RENAMED_PATH}"; then
            info "Registering '${ORIGINAL_THEME_FILE_RENAMED_PATH}' into update-alternatives (Priority 10)..."
            update-alternatives --install "${LINK_PATH_TO_MANAGE}" "${LINK_GROUP_NAME}" "${ORIGINAL_THEME_FILE_RENAMED_PATH}" 10 \
                || error_exit "Failed to install existing renamed original theme into update-alternatives."
        else
            info "'${ORIGINAL_THEME_FILE_RENAMED_PATH}' is already registered in alternatives."
        fi
    else
        # This case means LINK_PATH_TO_MANAGE is either a symlink already, or doesn't exist,
        # AND the ORIGINAL_THEME_FILE_RENAMED_PATH also doesn't exist. This is an unexpected state.
        if [ -L "${LINK_PATH_TO_MANAGE}" ]; then
             info "GDM theme at '${LINK_PATH_TO_MANAGE}' is already a symlink (managed by alternatives)."
             info "Assuming original theme is already handled or not present in its original file form."
        else
            error_exit "Cannot determine state of original GDM theme. Neither '${LINK_PATH_TO_MANAGE}' (as a file) nor '${ORIGINAL_THEME_FILE_RENAMED_PATH}' found."
        fi
    fi

    info "Installing custom theme '${COMPILED_GRESOURCE_PATH}' into update-alternatives (Priority 50)..."
    update-alternatives --install "${LINK_PATH_TO_MANAGE}" "${LINK_GROUP_NAME}" "${COMPILED_GRESOURCE_PATH}" 50 \
        || error_exit "Failed to install custom theme into update-alternatives."
    
    info "Setting custom theme as the active one..."
    update-alternatives --set "${LINK_GROUP_NAME}" "${COMPILED_GRESOURCE_PATH}" \
        || error_exit "Failed to set custom theme as active."
    
    info "Current alternatives configuration for '${LINK_GROUP_NAME}':"
    update-alternatives --display "${LINK_GROUP_NAME}"
    info "Update-alternatives configuration complete."
}

# --- Script Execution ---
main() {
    check_root_privileges
    install_dependencies
    prepare_background_image
    create_custom_css_file
    create_gresource_xml_file
    compile_custom_gresource
    configure_update_alternatives

    info ""
    info "-----------------------------------------------------------------------"
    info "Custom GDM login background script completed successfully!"
    info "IMPORTANT: You MUST restart GDM or reboot your computer for changes to take effect."
    info "You can restart GDM with: sudo systemctl restart gdm3 (this will log out current users)"
    info "Or, simply reboot with: sudo reboot"
    info "-----------------------------------------------------------------------"
}

# Run the main function
main

exit 0